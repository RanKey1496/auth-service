version: 2
jobs:
  test:
    docker:
      - image: circleci/node:8.9.4
    working_directory: ~/service
    steps:
      - checkout
      - run:
          name: Current branch
          command: echo ${CIRCLE_BRANCH}
      - restore_cache:
          keys:
            - dependencies-cache-{{ checksum "package.json" }}
            - dependencies-cache
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Install dependencies
          command: npm install -D typescript
      - run:
          name: Run test
          command: npm test
      - save_cache:
          paths:
            - node_modules
          key: dependencies-cache-{{ checksum "package.json" }}
  build:
    docker:
      - image: circleci/node:8.9.4
    working_directory: ~/service
    steps:
      - checkout
      - restore_cache:
          keys: 
            - dist-cache-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
            - dependencies-cache-{{ checksum "package.json" }}
            - dependencies-cache
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Build files
          command: npm run build
      - save_cache:
          key: dist-cache-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - dist
  deploy:
    docker:
      - image: circleci/node:8.9.4
    working_directory: ~/service
    steps:
      - checkout
      - add_ssh_keys
      - restore_cache:
          keys: 
            - dist-cache-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run: 
          name: Setup env
          command: |
            echo 'export TAG=0.1.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
            echo 'export IMAGE_NAME=auth' >> $BASH_ENV
      - run:
          name: Known host
          command: ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
      - run:
          name: Remove existing files
          command: ssh $SSH_USER@$SSH_HOST "mkdir -p ~/services; rm -rf ~/services/${SERVICE}"
      - run:
          name: Copy build
          command: scp -r ~/service "${SSH_USER}@${SSH_HOST}:~/services/${SERVICE}"
      - run:
          name: Build image
          command: ssh $SSH_USER@$SSH_HOST "cd ~/services/${SERVICE}; docker build -t rankey/$IMAGE_NAME:$TAG .;"
      - run:
          name: Push to dockerhub
          command: ssh $SSH_USER@$SSH_HOST "echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin; docker push rankey/$IMAGE_NAME:$TAG"
      - run:
          name: Exec deploy
          command: ssh $SSH_USER@$SSH_HOST "cd ~/services/${SERVICE}; docker stack deploy --compose-file docker-compose.yml ${SERVICE};"
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - test
      - build:
          requires:
            - test
      - deploy:
          requires:
            - build
